import React, { useState, useEffect } from 'react';
import { Card, Loader, FormField } from '../components';

//generic React functional componenet
const RenderCards = ({ data, title }) => {
    if(data?.length > 0) {
        return (
            data.map((post) => <Card key={post.id} {...post} />)
        )
    }

    return (
        <h2 className='mt-5 font-bold text-[#6449ff] text-xl uppercase'>
            {title}
        </h2>
    );
};

const Home = () => {
    const [loading, setLoading] = useState(false);
    const [allPosts, setAllPosts] = useState(null);
    const [searchText, setSearchText] = useState('');
    const [searchedResults, setSearchedResults] = useState(null);
    const [searchTimeout, setSearchTimeout] = useState(null);

    //to get the posts from backend and then display it on the home page, we need to create this hook
        const fetchPosts = async () => {
            setLoading(true);

            try {
                const response = await fetch('http://localhost:8080/api/v1/post', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                })

                if(response.ok) {
                    const result = await response.json();

                    setAllPosts(result.data.reverse()); //here, we are reversing the result because we want to see the newer posts at top
                }
            } catch (error) {
                alert(error);
            } finally {
                setLoading(false);
            }
        };

    useEffect(() => {
        fetchPosts();
    }, []);

    const handleSearchChange = (e) => {
        clearTimeout(searchTimeout);

        setSearchText(e.target.value);
        
        setSearchTimeout(
            setTimeout(() => {
                const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
                setSearchedResults(searchResult);
            }, 500), //this simply means that we are not going to search for each character, we are going to search for the string entered in 500ms
        );
    }

  return (
    <section className='max-w-7xl mx-auto'>
        <div>
            <h1 className='font-extrabold text-[#222328] text-[32px]'>
            The Community Showcase
            </h1>
            <p className='mt-2 text-[#666e75] text-[16px] max-w[500px]'>
                Browse through a collection of imaginative and visually stunning images generated by DALL-E
            </p>
        </div>

        <div className='mt-16'>
            <FormField 
                labelName="Search Posts"
                type="text"
                name="text"
                placeholder="Search posts"
                value={searchText}
                handleChange={handleSearchChange}
            />
        </div>

        <div className='mt-10'>
            {/* Here, we are creating a dynamic block of code */}
            {loading ? (
                <div className='flex justify-center items-center'>
                    <Loader />
                </div>
            ) : (
                /* If we do have any images to show, while displaying images, they can be from our search or just generic images */
                <>
                    {searchText && (
                        <h2 className='font-medium text-[#666e75] text-xl mb-3'>
                            Showing results for <span className='text-[#222328]'>{searchText}</span>
                        </h2>
                    )}

                    <div className='grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3'>
                        {searchText ? (
                            <RenderCards
                                data={searchedResults}
                                title="No search results found"
                            />
                        ) : (
                            <RenderCards 
                                data={allPosts}
                                title="No posts found"
                            />
                        )}
                    </div>
                </>
            )}
        </div>
    </section>
  );
};

export default Home;

//To export both of these pages from "Pages" folder, we can create an "index.js" file, that is going to serve as our export.

